{
    "hints": {
        "create_campaign(uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "contribute(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "check_goal()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw_funds()void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuZnVuZHJhaXNlci5jb250cmFjdC5GdW5kcmFpc2VyQXBwLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICAvLyBzbWFydF9jb250cmFjdHMvZnVuZHJhaXNlci9jb250cmFjdC5weToxMAogICAgLy8gY2xhc3MgRnVuZHJhaXNlckFwcChhcmM0LkFSQzRDb250cmFjdCk6CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "goal_amount": {
                    "type": "uint64",
                    "key": "goal_amount"
                },
                "total_raised": {
                    "type": "uint64",
                    "key": "total_raised"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "FundraiserApp",
        "methods": [
            {
                "name": "create_campaign",
                "args": [
                    {
                        "type": "uint64",
                        "name": "goal_amount"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Create a new fundraising campaign with the specified goal amount."
            },
            {
                "name": "contribute",
                "args": [
                    {
                        "type": "pay",
                        "name": "contribution"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Contribute funds to the campaign."
            },
            {
                "name": "check_goal",
                "args": [],
                "returns": {
                    "type": "uint64"
                },
                "desc": "Check the total amount raised so far."
            },
            {
                "name": "withdraw_funds",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw funds when the goal is met and sender is the creator."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}